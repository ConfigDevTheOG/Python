binary = {
    "0100000" : " ",  # space
    "0100001" : '!',  # !
    "0100010" : "", # "
    "0100011" : "#",  # #
    "0100100" : "$",  # $
    "0100101" : "%",  # %
    "0100110" : "&",  # &
    "0100111" : "'",  # '
    "0101000" : "(" ,  # (
    "0101001" : ")",  # )
    "0101010" : "*",  # *
    "0101011" : "+",  # +
    "0101100" : ",",  # ,
    "0101101" : "-",  # -
    "0101110" : ".",  # .
    "0101111" : "/",  # /
    "0110000" : "0",  # 0
    "0110001" : "1",  # 1
    "0110010" : "2",  # 2
    "0110011" : "3",  # 3
    "0110100" : "4",  # 4
    "0110101" : "5",  # 5
    "0110110" : "6",  # 6
    "0110111" : "7",  # 7
    "0111000" : "8",  # 8
    "0111001" : "9",  # 9
    "0111010" : ":",  # :
    "0111011" : ";",  # ;
    "0111100" : "<",  # <
    "0111101" : "=",  # =
    "0111110" : ">",  # >
    "0111111" : "?",  # ?
    "1000000" : "@",  # @
    "1000001" : "A",  # A
    "1000010" : "B",  # B
    "1000011" : "C",  # C
    "1000100" : "D",  # D
    "1000101" : "E",  # E
    "1000110" : "F",  # F
    "1000111" : "G",  # G
    "1001000" : "H",  # H
    "1001001" : "I",  # I
    "1001010" : "J",  # J
    "1001011" : "K",  # K
    "1001100" : "L",  # L
    "1001101" : "M",  # M
    "1001110" : "N",  # N
    "1001111" : "O",  # O
    "1010000" : "P",  # P
    "1010001" : "Q",  # Q
    "1010010" : "R",  # R
    "1010011" : "S",  # S
    "1010100" : "T",  # T
    "1010101" : "U",  # U
    "1010110" : "V",  # V
    "1010111" : "W",  # W
    "1011000" : "X",  # X
    "1011001" : "Y",  # Y
    "1011010" : "Z",  # Z
    "1011011" : "[",  # [
    "1011101" : "]",  # ]
    "1011110" : "^",  # ^
    "1011111" : "_",  # _
    "1100000" : "`",  # `
    "1100001" : "a",  # a
    "1100010" : "b",  # b
    "1100011" : "c",  # c
    "1100100" : "d",  # d
    "1100101" : "e",  # e
    "1100110" : "f",  # f
    "1100111" : "g",  # g
    "1101000" : "h",  # h
    "1101001" : "i",  # i
    "1101010" : "j",  # j
    "1101011" : "k",  # k
    "1101100" : "l",  # l
    "1101101" : "m",  # m
    "1101110" : "n",  # n
    "1101111" : "o",  # o
    "1110000" : "p",  # p
    "1110001" : "q",  # q
    "1110010" : "r",  # r
    "1110011" : "s",  # s
    "1110100" : "t",  # t
    "1110101" : "u",  # u
    "1110110" : "v",  # v
    "1110111" : "w",  # w
    "1111000" : "x",  # x
    "1111001" : "y",  # y
    "1111010" : "z",  # z
    "1111011" : "{",  # {
    "1111100" : "|",  # |
    "1111101" : "}",  # }
    "1111110" : "~"   # ~
    }

charslist = []
    


Choose = int(input(""
"7-Bit ASCII Encoder/Decoder"
"1. Encode text to 7-bit ASCII binary"
"2. Decode 7-bit ASCII binary to text"
" Enter choice (1 or 2): "))

if Choose == 1:
    Encodechars = input("Enter a sentence (expect using \) ")
    encoded = ''
    
    for i in Encodechars:
        for key, value in binary.items():
            if value == i:
                encoded += key + ' '

                break
    print(f'Encoded: {encoded} ')
        
if Choose == 2:
    Decodechars = input("Enter a sentence (expect using \): ").split()
    Decoded = ''

    for i in Decodechars:
        for key, value in binary.items():
            if key == i:
               Decoded += value 

    print(Decoded)
        




    
